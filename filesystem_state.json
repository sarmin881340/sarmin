{"file_contents":{"trust wallet project/Trust-Wallet-BD (1)/Trust-Wallet-BD/index.js":{"content":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst FacebookStrategy = require('passport-facebook').Strategy;\nconst bcrypt = require('bcrypt');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\n\nconst app = express();\nconst PORT = 5000;\n\n// ডেটা স্টোরেজের জন্য মেমোরিতে অবজেক্ট (অস্থায়ী)\nlet users = [];\nlet payments = [];\nlet reviews = [];\nlet messages = []; // মেসেজ স্টোরেজ\nlet adminUsers = [\n  { \n    id: 1, \n    email: 'admin@example.com', \n    password: bcrypt.hashSync('admin123', 10), \n    name: 'Admin' \n  }\n];\n\n// মিডলওয়্যার সেটআপ\napp.use(express.static('public'));\napp.use('/uploads', express.static('uploads'));\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(session({\n  secret: 'your_session_secret_key_2024',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { \n    maxAge: 30 * 24 * 60 * 60 * 1000, // ৩০ দিন (মিলিসেকেন্ডে)\n    secure: false, // HTTP এর জন্য false, HTTPS এর জন্য true\n    httpOnly: true, // নিরাপত্তার জন্য\n  },\n  name: 'sessionId' // কাস্টম সেশন নাম\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.set('view engine', 'ejs');\n\n// আপলোড ডিরেক্টরি তৈরি করা\nconst uploadDir = path.join(__dirname, 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n\n// মাল্টার কনফিগারেশন\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n\n// পাসপোর্ট স্ট্র্যাটেজি\npassport.use(new LocalStrategy(\n  { usernameField: 'email' },\n  async (email, password, done) => {\n    const user = users.find(u => u.email === email);\n    if (!user) {\n      return done(null, false, { message: 'ভুল ইমেইল বা পাসওয়ার্ড' });\n    }\n    \n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return done(null, false, { message: 'ভুল ইমেইল বা পাসওয়ার্ড' });\n    }\n    \n    return done(null, user);\n  }\n));\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  const user = users.find(u => u.id === id);\n  done(null, user);\n});\n\n// রুটস\napp.get('/', (req, res) => {\n  res.render('login', { message: null });\n});\n\napp.get('/login', (req, res) => {\n  res.render('login', { message: null });\n});\n\napp.get('/register', (req, res) => {\n  res.render('register', { message: null });\n});\n\napp.post('/register', async (req, res) => {\n  const { name, phone, email, password } = req.body;\n  \n  // চেক করা যে ইউজার আগে থেকেই আছে কিনা\n  const existingUser = users.find(u => u.email === email);\n  if (existingUser) {\n    return res.render('register', { message: 'এই ইমেইল দিয়ে আগে থেকেই একাউন্ট আছে' });\n  }\n  \n  // পাসওয়ার্ড হ্যাশ করা\n  const hashedPassword = await bcrypt.hash(password, 10);\n  \n  // নতুন ইউজার তৈরি করা\n  const newUser = {\n    id: users.length + 1,\n    userId: `U${Date.now().toString().slice(-6)}${(users.length + 1).toString().padStart(3, '0')}`, // ইউনিক ইউজার আইডি\n    name,\n    phone,\n    email,\n    password: hashedPassword,\n    balance: 0,\n    joinedAt: new Date()\n  };\n  \n  users.push(newUser);\n  res.redirect('/login');\n});\n\napp.post('/login', passport.authenticate('local', {\n  successRedirect: '/dashboard',\n  failureRedirect: '/login'\n}));\n\napp.get('/dashboard', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  res.render('dashboard', { user: req.user });\n});\n\napp.get('/payment', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  res.render('payment', { user: req.user });\n});\n\napp.post('/payment', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  \n  const { senderNumber, amount, releaseNumber, paymentNote } = req.body;\n  \n  // পেমেন্ট রেকর্ড সেভ করা (কিন্তু ব্যালেন্স যোগ করা হবে না)\n  const payment = {\n    id: payments.length + 1,\n    userId: req.user.id,\n    senderNumber,\n    amount: parseInt(amount),\n    releaseNumber,\n    paymentNote: paymentNote || '',\n    status: 'pending',\n    submittedAt: new Date()\n  };\n  \n  payments.push(payment);\n  \n  // সফল সাবমিশনের মেসেজ দেখিয়ে ড্যাশবোর্ডে ফিরে যাওয়া\n  res.render('dashboard', { \n    user: req.user, \n    paymentMessage: '৫ মিনিটের মধ্যে আপনার অ্যাকাউন্টে টাকা যোগ হয়ে যাবে। যদি টাকা না যোগ হয় তাহলে এডমিন চেক করে দিবেন।' \n  });\n});\n\napp.get('/write_review', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  res.render('write_review', { user: req.user });\n});\n\napp.post('/write_review', upload.single('screenshot'), (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  \n  const { returnNumber, message } = req.body;\n  const screenshot = req.file ? req.file.filename : null;\n  \n  // রিভিউ রেকর্ড সেভ করা\n  const review = {\n    id: reviews.length + 1,\n    userId: req.user.id,\n    returnNumber,\n    message,\n    screenshot,\n    submittedAt: new Date(),\n    status: 'pending'\n  };\n  \n  reviews.push(review);\n  \n  res.render('write_review', { \n    user: req.user, \n    message: '৩০ মিনিটের মধ্যে আপনার টাকা ফেরত পেয়ে যাবেন' \n  });\n});\n\n// এডমিন রুটস\napp.get('/admin_login', (req, res) => {\n  res.render('admin_login', { message: null });\n});\n\napp.post('/admin_login', async (req, res) => {\n  const { email, password } = req.body;\n  \n  const admin = adminUsers.find(u => u.email === email);\n  if (!admin) {\n    return res.render('admin_login', { message: 'ভুল ইমেইল বা পাসওয়ার্ড' });\n  }\n  \n  const isMatch = await bcrypt.compare(password, admin.password);\n  if (!isMatch) {\n    return res.render('admin_login', { message: 'ভুল ইমেইল বা পাসওয়ার্ড' });\n  }\n  \n  req.session.admin = admin;\n  res.redirect('/admin_panel');\n});\n\napp.get('/admin_panel', (req, res) => {\n  if (!req.session.admin) {\n    return res.redirect('/admin_login');\n  }\n  \n  res.render('admin_panel', { \n    users, \n    payments, \n    reviews,\n    messages,\n    admin: req.session.admin\n  });\n});\n\n// পেমেন্ট অনুমোদন করার রুট\napp.post('/admin/approve_payment/:id', (req, res) => {\n  if (!req.session.admin) {\n    return res.redirect('/admin_login');\n  }\n  \n  const paymentId = parseInt(req.params.id);\n  const payment = payments.find(p => p.id === paymentId);\n  \n  if (payment && payment.status === 'pending') {\n    // পেমেন্ট অনুমোদন করা\n    payment.status = 'approved';\n    payment.approvedAt = new Date();\n    payment.approvedBy = req.session.admin.id;\n    \n    // ইউজারের ব্যালেন্স আপডেট করা\n    const userIndex = users.findIndex(u => u.id === payment.userId);\n    if (userIndex !== -1) {\n      users[userIndex].balance += payment.amount;\n    }\n  }\n  \n  res.redirect('/admin_panel');\n});\n\n// পেমেন্ট বাতিল করার রুট  \napp.post('/admin/reject_payment/:id', (req, res) => {\n  if (!req.session.admin) {\n    return res.redirect('/admin_login');\n  }\n  \n  const paymentId = parseInt(req.params.id);\n  const payment = payments.find(p => p.id === paymentId);\n  \n  if (payment && payment.status === 'pending') {\n    payment.status = 'rejected';\n    payment.rejectedAt = new Date();\n    payment.rejectedBy = req.session.admin.id;\n  }\n  \n  res.redirect('/admin_panel');\n});\n\napp.get('/logout', (req, res) => {\n  req.logout((err) => {\n    if (err) {\n      return next(err);\n    }\n    res.redirect('/login');\n  });\n});\n\napp.get('/admin_logout', (req, res) => {\n  req.session.admin = null;\n  res.redirect('/admin_login');\n});\n\n// মেসেজিং রুট\napp.get('/messages', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  res.render('messages', { user: req.user, messages: [] });\n});\n\napp.post('/search_user', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  \n  const { searchUserId } = req.body;\n  const foundUser = users.find(u => u.userId === searchUserId && u.id !== req.user.id);\n  \n  if (foundUser) {\n    res.render('messages', { \n      user: req.user, \n      foundUser,\n      messages: messages.filter(m => \n        (m.senderId === req.user.id && m.receiverId === foundUser.id) || \n        (m.senderId === foundUser.id && m.receiverId === req.user.id)\n      ).sort((a, b) => new Date(a.sentAt) - new Date(b.sentAt))\n    });\n  } else {\n    res.render('messages', { \n      user: req.user, \n      error: 'এই ইউজার আইডি দিয়ে কোনো ইউজার পাওয়া যায়নি!',\n      messages: []\n    });\n  }\n});\n\napp.post('/send_message', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  \n  const { receiverId, messageText } = req.body;\n  const receiver = users.find(u => u.id === parseInt(receiverId));\n  \n  if (receiver && messageText.trim()) {\n    const newMessage = {\n      id: messages.length + 1,\n      senderId: req.user.id,\n      receiverId: parseInt(receiverId),\n      messageText: messageText.trim(),\n      sentAt: new Date()\n    };\n    \n    messages.push(newMessage);\n  }\n  \n  res.redirect('/search_user_redirect/' + receiver.userId);\n});\n\napp.get('/search_user_redirect/:userId', (req, res) => {\n  if (!req.user) {\n    return res.redirect('/login');\n  }\n  \n  const foundUser = users.find(u => u.userId === req.params.userId);\n  \n  if (foundUser) {\n    res.render('messages', { \n      user: req.user, \n      foundUser,\n      messages: messages.filter(m => \n        (m.senderId === req.user.id && m.receiverId === foundUser.id) || \n        (m.senderId === foundUser.id && m.receiverId === req.user.id)\n      ).sort((a, b) => new Date(a.sentAt) - new Date(b.sentAt))\n    });\n  } else {\n    res.redirect('/messages');\n  }\n});\n\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`সার্ভার চলছে http://localhost:${PORT} এ`);\n});","size_bytes":11243},"trust wallet project/Trust-Wallet-BD (1)/Trust-Wallet-BD/replit.md":{"content":"# Overview\n\nThis is a Node.js web application built with Express.js that provides user authentication, file upload capabilities, and basic data management functionality. The application uses EJS as the templating engine and includes both local and Facebook authentication strategies. It appears to be designed for a service-oriented platform with user registration, payment tracking, and review management features.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Backend Framework\n- **Express.js** - Chosen as the main web framework for its simplicity and robust middleware ecosystem\n- **EJS templating** - Server-side rendering for dynamic HTML pages with embedded JavaScript\n- **In-memory data storage** - Currently uses JavaScript arrays for temporary data storage (users, payments, reviews, adminUsers)\n\n## Authentication System\n- **Passport.js** with multiple strategies:\n  - Local Strategy for email/password authentication\n  - Facebook Strategy for social login integration\n- **bcrypt** for password hashing and security\n- **express-session** for session management\n\n## File Management\n- **Multer** middleware for handling file uploads\n- Static file serving through Express for uploaded content\n- Dedicated uploads directory for file storage\n\n## Frontend Architecture\n- Static CSS styling with gradient backgrounds and modern UI elements\n- Responsive design with flexbox layout\n- Form-based user interactions\n\n## Security Features\n- Password hashing with bcrypt\n- Session-based authentication\n- Input validation through body-parser middleware\n\n## Data Models\nThe application manages several data entities:\n- **Users** - User registration and profile information\n- **Payments** - Payment transaction records\n- **Reviews** - User review and feedback system\n- **Admin Users** - Administrative access with pre-seeded admin account\n\n# External Dependencies\n\n## Core Dependencies\n- **express** (^5.1.0) - Web application framework\n- **ejs** (^3.1.10) - Templating engine for server-side rendering\n- **passport** (^0.7.0) - Authentication middleware\n- **passport-local** (^1.0.0) - Local authentication strategy\n- **passport-facebook** (^3.0.0) - Facebook OAuth integration\n- **bcrypt** (^6.0.0) - Password hashing library\n- **express-session** (^1.18.2) - Session management\n- **multer** (^2.0.2) - File upload handling\n- **body-parser** (^2.2.0) - Request body parsing middleware\n\n## Development Dependencies\n- **@types/node** (^22.13.11) - TypeScript definitions for Node.js\n\n## Social Media Integration\n- Facebook OAuth for social authentication (requires Facebook App configuration)\n\n## File System Dependencies\n- Local file system for upload storage\n- Static asset serving for CSS and uploaded files\n\nNote: The application currently uses in-memory storage which is not persistent. A database solution like PostgreSQL or MongoDB would be recommended for production use.","size_bytes":2933},"trust wallet project/Trust-Wallet-BD (1)/Trust-Wallet-BD/public/style.css":{"content":"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  background-attachment: fixed;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.container {\n  background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);\n  padding: 40px;\n  border-radius: 20px;\n  box-shadow: 0 20px 50px rgba(0,0,0,0.15);\n  width: 100%;\n  max-width: 95vw;\n  margin: 0 auto;\n  text-align: center;\n  min-height: calc(100vh - 40px);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border: 1px solid rgba(255,255,255,0.3);\n  backdrop-filter: blur(10px);\n}\n\nh2 {\n  color: #333;\n  margin-bottom: 30px;\n  font-size: 32px;\n}\n\ninput[type=\"text\"], \ninput[type=\"email\"], \ninput[type=\"password\"], \ninput[type=\"tel\"],\ninput[type=\"number\"],\ntextarea {\n  width: 100%;\n  padding: 18px;\n  margin: 15px 0;\n  border: 2px solid #ddd;\n  border-radius: 10px;\n  font-size: 18px;\n  transition: border-color 0.3s;\n}\n\ninput[type=\"file\"] {\n  width: 100%;\n  padding: 15px;\n  margin: 15px 0;\n  border: 2px solid #ddd;\n  border-radius: 10px;\n  font-size: 16px;\n}\n\ninput:focus, textarea:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n.btn {\n  width: 100%;\n  padding: 20px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  border-radius: 10px;\n  font-size: 20px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: transform 0.3s;\n  margin: 20px 0;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n}\n\n.btn-secondary {\n  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n  margin-top: 15px;\n}\n\n.error {\n  color: #e74c3c;\n  margin: 20px 0;\n  padding: 15px;\n  background: #ffeaea;\n  border-radius: 8px;\n  border: 1px solid #e74c3c;\n  font-size: 16px;\n}\n\n.success {\n  color: #27ae60;\n  margin: 20px 0;\n  padding: 15px;\n  background: #eafaf1;\n  border-radius: 8px;\n  border: 1px solid #27ae60;\n  font-size: 16px;\n}\n\np {\n  margin: 25px 0;\n  color: #666;\n  font-size: 16px;\n}\n\na {\n  color: #667eea;\n  text-decoration: none;\n  font-weight: bold;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n/* ড্যাশবোর্ড স্টাইল */\n.dashboard {\n  max-width: 95vw;\n  width: 100%;\n  padding: 40px;\n  text-align: left;\n}\n\n.balance {\n  font-size: 32px;\n  color: #ffffff;\n  font-weight: bold;\n  margin: 30px 0;\n  text-align: center;\n  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\n  padding: 25px;\n  border-radius: 15px;\n  border: 3px solid #ffffff;\n  box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);\n}\n\n.buttons {\n  display: flex;\n  gap: 30px;\n  margin: 40px 0;\n  justify-content: center;\n}\n\n.buttons .btn {\n  flex: 1;\n  max-width: 300px;\n  font-size: 22px;\n  padding: 25px;\n}\n\n.announcement {\n  background: linear-gradient(135deg, #e8f5e8 0%, #d4edda 50%, #c3e6cb 100%);\n  padding: 40px;\n  border-radius: 20px;\n  border: 4px solid #28a745;\n  margin: 40px 0;\n  text-align: left;\n  font-size: 20px;\n  line-height: 1.8;\n  box-shadow: 0 15px 35px rgba(40, 167, 69, 0.3);\n}\n\n.announcement h3 {\n  color: #1976D2;\n  margin-bottom: 25px;\n  font-size: 32px;\n  text-align: center;\n  font-weight: bold;\n}\n\n.announcement p {\n  font-size: 18px;\n  margin: 15px 0;\n  color: #2c5aa0;\n  font-weight: 500;\n}\n\n.announcement strong {\n  font-size: 20px;\n  color: #1976D2;\n}\n\n/* এডমিন প্যানেল স্টাইল */\n.admin-panel {\n  max-width: 95vw;\n  width: 100%;\n  padding: 40px;\n  background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);\n  border-radius: 20px;\n  margin: 0 auto;\n  box-shadow: 0 20px 50px rgba(0,0,0,0.15);\n  border: 1px solid rgba(255,255,255,0.3);\n  backdrop-filter: blur(10px);\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin: 30px 0;\n  background: white;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0 8px 25px rgba(0,0,0,0.1);\n  font-size: 16px;\n}\n\nth, td {\n  padding: 18px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\nth {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  font-weight: bold;\n  font-size: 18px;\n}\n\ntr:hover {\n  background: #f8f9fa;\n}\n\n.status-pending {\n  color: #f39c12;\n  font-weight: bold;\n}\n\n.status-approved {\n  color: #27ae60;\n  font-weight: bold;\n}\n\n.status-rejected {\n  color: #e74c3c;\n  font-weight: bold;\n}\n\n/* রেসপন্সিভ ডিজাইন */\n@media (max-width: 768px) {\n  body {\n    padding: 10px;\n  }\n  \n  .container {\n    padding: 25px;\n    min-height: calc(100vh - 20px);\n  }\n  \n  .dashboard {\n    padding: 25px;\n  }\n  \n  .buttons {\n    flex-direction: column;\n    gap: 20px;\n  }\n  \n  .admin-panel {\n    padding: 25px;\n    overflow-x: auto;\n  }\n  \n  table {\n    min-width: 800px;\n  }\n  \n  h2 {\n    font-size: 26px;\n  }\n  \n  .balance {\n    font-size: 24px;\n  }\n}","size_bytes":4853}},"version":1}